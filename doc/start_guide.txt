
            =============== Install guide for TEA ==================
                                Version 1.0

This is an installation and a quick-start guide for the Thermochemical
Equilibrium Abundances (TEA) code. The code calculates equilibrium abundances
of gaseous molecular species. It works with high numerical precision, 
without adjustments, for temperatures above ~600 K. For temperatures below 
600 K and mixing fractions below 1e-14, the code produces results with low
precision. The output can be improved with fine adjustments to the lambda 
exploration variables in the lambdacorr.py module (see documentation).

******************************* START LICENSE *******************************
Thermal Equilibrium Abundances (TEA), a code to calculate gaseous molecular
abundances under thermochemical equilibrium conditions.

This project was completed with the support of the NASA Earth and
Space Science Fellowship Program, grant NNX12AL83H, held by Jasmina
Blecic, Principal Investigator Joseph Harrington. Project developers
included graduate student Jasmina Blecic and undergraduate M. Oliver
Bowman.

Copyright (C) 2014-2015 University of Central Florida.  All rights reserved.
See LICENSE.txt for license terms

This is a test version only, and may not be redistributed to any third
party.  Please refer such requests to us.  This program is distributed
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.

Our intent is to release this software under an open-source,
reproducible-research license, once the code is mature and the first
research paper describing the code has been accepted for publication
in a peer-reviewed journal.  We are committed to development in the
open, and have posted this code on github.com so that others can test
it and give us feedback.  However, until its first publication and
first stable release, we do not permit others to redistribute the code
in either original or modified form, nor to publish work based in
whole or in part on the output of this code.  By downloading, running,
or modifying this code, you agree to these conditions.  We do
encourage sharing any modifications with us and discussing them
openly.

We welcome your feedback, but do not guarantee support.  Please send
feedback or inquiries to both:

Jasmina Blecic <jasmina@physics.ucf.edu>
Joseph Harrington <jh@physics.ucf.edu>

or alternatively,

Jasmina Blecic and Joseph Harrington
UCF PSB 441
4111 Libra Drive
Orlando, FL 32816-2385
USA

Thank you for testing TEA!
******************************* END LICENSE *******************************


1. ==== Packages ====

   Ensure following python packages are installed:
          Python: 2.7.3+
          NumPy:  1.6.1+
          SymPy:  0.7.1.rc1 (This version ensures maximum performance)
   
          Sympy download:
                https://github.com/sympy/sympy/releases/tag/sympy/0.7.1.rc1


2. ==== Content ====

   Download TEA from www.github.com/dzesmin/TEA using the command:
          - git clone https://github.com/dzesmin/TEA

   The the following is included:
 
   1. README
          - file with basic instructions

   2. == doc/ ==  
          - directory containing:
            - 'examples' directory with:
                 - 'multiTP/' directory containing multiTP example run
                 - 'singleTP/' directory containing singleTP example run
                 - 'quick_example/' directory containing a quick example run
                 - 'PT/' directory containing an example of the 
                    pressure and temperature profile
                 - 'plots/' directory containing the plot produced from the 
                    multiTP example final atmospheric file
            - TEA-Theory.pdf - document containing theory part of the code
                               (Blecic et al. 2015)
            - TEA-UserGuide.pdf - document containing the user guide
            - TEA-CodeDescription.pdf - document containing the program 
                    description
            - start_guide.txt - this file

   3. == janaf/ == 
          - directory containing JANAF tables in their raw format
                (download in October 2012)

   4. == lib/ == 
          - directory containing:
            - abundances.txt - elemental abundances file, Asplund et al 2009,
                IUPAC
                http://adsabs.harvard.edu/abs/2009ARA%26A..47..481A
            - TEA.cfg - configuration file
            - gdata/ - directory containing thermochemical data of interest
                from JANAF tables
            - stoich.txt - stoichiometric data file
            - conversion_record_sorted.txt - record of converted JANAF files
                produced after readJANAF.py is run. The run will produce
                unsorted the conversion_record.txt file. To sort the content
                alphabetically, execute:
                sort conversion_record.txt >conversion_record_sorted.txt

    5. == prepipe/ == 
            - directory containing source files to produce thermochemical 
              library and stoichiometric information:
              directory gdata/, conversion_record.txt, and stoich.txt
                prepipe.py (*)
                makestoich.py (*)
                readJANAF.py (*)
    6. == tea/ ==
            - directory containing TEA source files:
                balance.py (*)
                format.py
                iterate.py (*)
                lagrange.py
                lambdacorr.py
                makeheader.py
                readatm.py
                runatm.py (*)
                runsingle.py (*)
            - and TEA supporting modules:
                makeatm.py (*)
                plotTEA.py (*)
                readconf.py

            Asterisk (*) indicates modules that must be executable in 
            *nix (e.g., Linux) systems.

   TEA examples with the complete directory structure and files (size ~75MB) 
   are placed in a separate repo, TEA-Examples/. A shorter version of these
   examples are provided within the main TEA repo described above. 
   To download the TEA examples execute:
          - git clone https://github.com/dzesmin/TEA-Examples


3. ==== Quick example ====

   The following script gives an example of a TEA run on Linux operating
   systems. Copy and paste the commands into the command prompt.

   Create a working directory outside of the TEA package directory:

mkdir TEA_example
cd TEA_example

   Clone the repository to the working directory:

git clone https://github.com/dzesmin/TEA TEA
cd TEA

   Make a run directory to place the configuration file and outputs in:

mkdir run
cd run
cp ../doc/examples/quick_example/TEA.cfg TEA.cfg

   Run TEA using the pre-atmopsheric file from the doc/examples directory:

../tea/runatm.py ../doc/examples/quick_example/quick_example.atm run_example

   To plot results execute:

../tea/plotTEA.py run_example/results/run_example.tea H2,H2O,CO

   Check the output by comparing the results between
   doc/examples/quick_example/results/ with the run/run_example/results/
   and
   doc/examples/plots/ with run/plots/ directories.


4. ==== Run pre-pipeline ====

   Files and directory produced by this run are already distributed with the 
          code (lib/gdata, lib/stoich.txt, and lib/conversion_record_sorted.txt),
          and thus there is no need to run the code again. However, if new
          JANAF files become available, the user can re-run the code with the
          new data. The code reads only the JANAF tables in the format 
          provided in October 2012.

   To re-run the code with new JANAF tables, create a working directory.
          From 'TEA/lib/' directory, copy TEA.cfg file into the working directory.
          Open TEA.cfg and adjust parameters. Run the pre-pipeline as:

run ../TEA/prepipe/prepipe.py

   OPTIONAL (run separately):

run ../TEA/prepipe/makestoch.py
run ../TEA/prepipe/readJANAF.py

   This run will produce the data needed for TEA to run and place them in lib/
   directory:
          1. gdata/, directory with thermochemical data
          2. stoich.txt, stoichiometric file carrying stoichiometric values for
             each species in JANAF tables
          3. conversion_record.txt, a record of converted JANAF files required
             for the user to track the species available in the JANAF tables 
             and compare them with the names produced by TEA. This ensures the
             correct pre-atmosphere file is made (see section below).  To sort 
             the content of the conversion_record.txt alphabetically, execute:
             sort conversion_record.txt >conversion_record_sorted.txt

   If doprint is set to 'True' in TEA.cfg, the following directory is also created:
          stochcoeff/ - directory containing a file per species with 
                        stoichiometric values for each species

5. ==== Produce input file ====

   If a working directory has not been made, create one. 
             From 'TEA/lib/' directory, copy the TEA.cfg file into your working
             directory. Open TEA.cfg and adjust parameters. Use gdata/ 
             directory or the conversion_record_sorted.txt to look up the 
             correct names and states of input/output species that TEA 
             can accept.

   For single-TP:
             To create a custom input file, follow the key in the example.
             See example in ../TEA/doc/examples/singleTP/inputs/inp_Example.txt

   For multiple-TP: 
             To create a custom pre-atmosphere file either follow design
             of the example or execute makeatm.py. See example in 
             ../TEA/doc/examples/multiTP/atm_inputs/multiTP.atm

             Procedure to create pre-atmosphere file with makeatm.py:
             a) If a working directory has not been made, create one.
             b) From 'TEA/lib/' directory, copy the TEA.cfg file into your 
                working directory.
             c) Open TEA.cfg and adjust parameters. Edit both sections. 
                Run makeatm.py as:

../TEA/tea/makeatm.py <DIRECTORY_NAME>

                note: <DIRECTORY_NAME> is the name of the directory that
                      will be made below the current working directory
                Example: ../TEA/tea/makeatm.py multiTP
                The pre-atm file will be placed in the 
                <DIRECTORY_NAME>/atm_inputs/ directory and will have an
                extension as given in TEA.cfg (default:.atm).


6. ==== Execute TEA ====

   If a working directory has not been made, create one.
             From 'TEA/lib/' directory, copy TEA.cfg file into your working
             directory. Open TEA.cfg and adjust parameters. Only 'TEA SECTION'
             is used while TEA is running. Except for 'maxiter' parameter, 
             all other parameters are for debugging purposes. Setting them to
             'False' will ensure the fastest execution.

   For single-TP: 
             In shell from the working directory execute:

../TEA/tea/runsingle.py <SINGLETP_INPUT_FILE_PATH> <DIRECTORY_NAME>

             note: <DIRECTORY_NAME> is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/tea/runsingle.py ../TEA/doc/examples/singleTP/inputs/inp_Example.txt singleTP

             Results will be placed in <DIRECTORY_NAME>/results/
             note: <DIRECTORY_NAME> is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/doc/examples/singleTP/results/

             This runs TEA for just one temperature and pressure. The current
             iteration  number is printed on-screen as the code progresses. 
             The execution time for the example given is 2-5 seconds.

   For multiple-TP: 
             In shell from the working directory execute:
             1. If multiTP input file is made with the makeatm.py:

../TEA/tea/runatm.py <PATH_TO_DIRECTORY_NAME>/atm_inputs/<MULTITP_INPUT_FILE_PATH> <DIRECTORY_NAME>

             note: <PATH_TO_DIRECTORY_NAME> is the path to the directory, 
                   <DIRECTORY_NAME>, that is created when makeatm.py is run.
             2. If custom made multiTP input file is produced on other 
             location:

../TEA/tea/runatm.py <MULTITP_INPUT_FILE_PATH> <DIRECTORY_NAME>

             note: <DIRECTORY_NAME> is the name of the directory that
                   will be made below the current working directory.
             Example: ../TEA/tea/runatm.py ../TEA/doc/examples/multiTP/atm_inputs/multiTP_Example.atm multiTP

             This will run TEA for every T-P line of the pre-atmosphere file. 
             The current line  number of the pre-atmosphere file and current
             iteration number is printed on-screen as the code progresses. 
             The execution time for the example given should be between 5-10
             minutes on a dual core machine.
    
             Results will be placed in <DIRECTORY_NAME>/results/
             note: <DIRECTORY_NAME> is the name of the directory that
                   will be made below the current working directory
             Example: ../TEA/doc/examples/multiTP/results/
             The final TEA output will have an extension .tea and will
             have the name of the <DIRECTORY_NAME>.


7.  ==== Output ====

    After running makeatm.py, the following directory and files are created
    below the working directory:

             - Output directory based on the user-defined <RESULT_DIR_NAME>.
             - Below this directory:

                - atm_inputs/ - stores all input files used to run makeatm.py:
                              abundances.txt - abundances file 
                              PTprofile.dat - pressure and temperature file 
                              TEA.cfg - TEA configuration file 
                              pre-atm.atm - multi TP pre-atmosphere file 
    
    After running TEA, the following directories and files are created
    below working directory:

             - Output directory based on the user <RESULT_DIR_NAME>.
             - Below this directory:

                - inputs/    - directory that stores input files used to run TEA
                - results/   - directory that contains final results

                            For single-TP:
                                abundances.txt - abundances file 
                                TEA.cfg - TEA configuration file 
                                singleTP.txtsingle TP input file 

                            For multiple-TP:
                                abundances.txt - abundances file 
                                TEA.cfg - TEA configuration file 
                                pre-atm.txt - multi TP pre-atmosphere file 

                - headers/ and outputs/ directories are temporarily made, 
                  overwritten in each run/iteration, and finally deleted 
                  after the full TEA run is finished.

                - If doprint, save_headers, and save_outputs are set to 'True' in
                  TEA.cfg, the following are also created:
    
                  - headers/   - directory that preserves and stores all headers
                  - outputs/   - directory that stores all intermediate files


8. ==== Plot TEA ====

   To plot the final results, run plotTEA.py. Instructions on how
           to execute the code are found in ../TEA/tea/plotTEA.py documentation.
           Example: ../TEA/tea/plotTEA.py ../TEA/doc/examples/multiTP/results/multiTP_Example.tea CO,CH4,H2O,NH3
           Plots will be placed in the ./plots/ directory.

   Recall, for temperatures below 600 K and mixing fractions below 1e-14,
           TEA produces results with low precision.


======================
POTENTIAL USER ERRORS 
======================

1. The user should have unique T-P values for each line in the
   PT-profile file before running makeatm.py, otherwise
   each repeated layer will be overwritten and the final atmosphere
   file will end up with fewer lines.
2. input_elem must have symbols as they appear in the periodic table.
3. out_species must include all input elements with their states as
   readJANAF.py produces them. See ../TEA/lib/gdata/ directory and the
   conversion_record_sorted.txt file for the correct names of
   the species.
4. Should the code stall on the first iteration of the first
   temperature, check if all elements that appear in the species
   list are included with their correct names.
5. Elemental hydrogen (H) and helium (He) must always be included in in_elem
   for hot-Jupiter atmosphere calculations. Similarly, the H_g, He_ref
   and H2_ref species must also appear in out_spec for these calculations.

